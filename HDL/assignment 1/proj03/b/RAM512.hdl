// This file is BASED ON part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: project03starter/b/RAM512.hdl

/**
 * Memory of 512 registers, each 8 bits wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[8], load, address[9];
    OUT out[8];

    PARTS:
    // Your code here
    /* REMEMBER: use the built-in RAM64 chip, not your one from part a/.
     * Since the built-in version is 16 bits wide, you will need to wire
     * it up using sub-buses, so that you use only the bottom 8 bits of
     * RAM64's 'in' and 'out' buses. That should be easy, if you've got
     * this far. */
	 
DMux8Way(in=load,sel=address[6..8],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);

RAM64(in[0..7]=in,load=a,address=address[0..5],out[0..7]=oa);
RAM64(in[0..7]=in,load=b,address=address[0..5],out[0..7]=ob);
RAM64(in[0..7]=in,load=c,address=address[0..5],out[0..7]=oc);
RAM64(in[0..7]=in,load=d,address=address[0..5],out[0..7]=od);
RAM64(in[0..7]=in,load=e,address=address[0..5],out[0..7]=oe);
RAM64(in[0..7]=in,load=f,address=address[0..5],out[0..7]=of);
RAM64(in[0..7]=in,load=g,address=address[0..5],out[0..7]=og);
RAM64(in[0..7]=in,load=h,address=address[0..5],out[0..7]=oh);

Mux8Way8(a=oa,b=ob,c=oc,d=od,e=oe,f=of,g=og,h=oh,sel=address[6..8],out=out);
}
