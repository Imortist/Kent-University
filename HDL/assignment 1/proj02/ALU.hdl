// This file is BASED ON part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: project02starter/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 8-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 8-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 8-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[8], y[8],  // 8-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[8], // 7-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
//Process X input
	Mux8(a=x,b[0..7]=false,sel=zx,out=zdx);
	Not8(in=zdx,out=notx);                 
	Mux8(a=zdx,b=notx,sel=nx,out=ndx);     
	
// Same for Y
	Mux8(a=y,b[0..7]=false,sel=zy,out=zdy);
	Not8(in=zdy,out=noty);
	Mux8(a=zdy,b=noty,sel=ny,out=ndy);
	
//ADD
	Add8(a=ndx,b=ndy,out=xplusy); 
	
// AND
	And8(a=ndx,b=ndy,out=xandy);  
	
//Choose between two
	Mux8(a=xandy,b=xplusy,sel=f,out=fxy);

//Negate OUTPUT
	Not8(in=fxy,out=nfxy);
	Mux8(a=fxy,b=nfxy,sel=no,out=oo);  

//Zero flag
	Or8Way(in=oo,out=o); 
	Not(in=o,out=zr);
	
//Negative flag
	And8(a[0..7]=true,b=oo,out[7]=ng,out[0..6]=drop);
	Or8(a=oo,b[0..7]=false,out=out); 
}
